name: Build and Deploy

on:
  push:
    branches:
      - main      # Production branch
      - develop   # Dev branch
      - qa        # QA branch
  pull_request:
    branches:
      - main
      - develop
      - qa

env:
  AZURE_CONTAINER_REGISTRY: your-acr-name.azurecr.io
  IMAGE_NAME: your-app-name

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      environment: ${{ steps.set-env.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set environment based on branch
      id: set-env
      run: |
        if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
          echo "environment-suffix=" >> $GITHUB_OUTPUT
        elif [[ ${{ github.ref }} == 'refs/heads/qa' ]]; then
          echo "environment=qa" >> $GITHUB_OUTPUT
          echo "environment-suffix=-qa" >> $GITHUB_OUTPUT
        elif [[ ${{ github.ref }} == 'refs/heads/develop' ]]; then
          echo "environment=dev" >> $GITHUB_OUTPUT
          echo "environment-suffix=-dev" >> $GITHUB_OUTPUT
        else
          echo "environment=none" >> $GITHUB_OUTPUT
          echo "environment-suffix=-pr" >> $GITHUB_OUTPUT
        fi

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.environment }}-latest
        labels: ${{ steps.meta.outputs.labels }}

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: 
      name: dev
      url: https://your-app-dev.azurewebsites.net
    
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

    - name: Deploy to Azure Container Instances (Dev)
      uses: azure/aci-deploy@v1
      with:
        resource-group: your-dev-rg
        dns-name-label: your-app-dev
        image: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        registry-login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}
        registry-username: ${{ secrets.ACR_USERNAME }}
        registry-password: ${{ secrets.ACR_PASSWORD }}
        name: your-app-dev
        location: 'East US'
        environment-variables: |
          NODE_ENV=development
          DATABASE_URL=${{ secrets.DEV_DATABASE_URL }}
        secure-environment-variables: |
          API_KEY=${{ secrets.DEV_API_KEY }}

    # Alternative: Deploy to Azure Web App
    # - name: Deploy to Azure Web App (Dev)
    #   uses: azure/webapps-deploy@v2
    #   with:
    #     app-name: your-app-dev
    #     images: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-qa:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/qa' && github.event_name == 'push'
    environment: 
      name: qa
      url: https://your-app-qa.azurewebsites.net
    
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_QA }}

    - name: Deploy to Azure Container Instances (QA)
      uses: azure/aci-deploy@v1
      with:
        resource-group: your-qa-rg
        dns-name-label: your-app-qa
        image: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        registry-login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}
        registry-username: ${{ secrets.ACR_USERNAME }}
        registry-password: ${{ secrets.ACR_PASSWORD }}
        name: your-app-qa
        location: 'East US'
        environment-variables: |
          NODE_ENV=staging
          DATABASE_URL=${{ secrets.QA_DATABASE_URL }}
        secure-environment-variables: |
          API_KEY=${{ secrets.QA_API_KEY }}

  deploy-prod:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://your-app.azurewebsites.net
    
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

    - name: Deploy to Azure Container Instances (Production)
      uses: azure/aci-deploy@v1
      with:
        resource-group: your-prod-rg
        dns-name-label: your-app-prod
        image: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        registry-login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}
        registry-username: ${{ secrets.ACR_USERNAME }}
        registry-password: ${{ secrets.ACR_PASSWORD }}
        name: your-app-prod
        location: 'East US'
        environment-variables: |
          NODE_ENV=production
          DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}
        secure-environment-variables: |
          API_KEY=${{ secrets.PROD_API_KEY }}

  notify:
    needs: [build, deploy-dev, deploy-qa, deploy-prod]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      if: needs.build.outputs.environment != 'none'
      run: |
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "✅ Deployment to ${{ needs.build.outputs.environment }} successful"
        else
          echo "❌ Deployment to ${{ needs.build.outputs.environment }} failed"
        fi
